"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isServerErrorResponse = exports.WorkflowContinuedAsNewError = exports.WorkflowFailedError = exports.ServiceError = void 0;
/**
 * Generic Error class for errors coming from the service
 */
class ServiceError extends Error {
    constructor(message, opts) {
        super(message);
        this.name = 'ServiceError';
        this.cause = opts?.cause;
    }
}
exports.ServiceError = ServiceError;
/**
 * Thrown by the client while waiting on Workflow execution result if execution
 * completes with failure.
 *
 * The failure type will be set in the `cause` attribute.
 *
 * For example if the workflow is cancelled, `cause` will be set to
 * {@link CancelledFailure}.
 */
class WorkflowFailedError extends Error {
    constructor(message, cause, retryState) {
        super(message);
        this.cause = cause;
        this.retryState = retryState;
        this.name = 'WorkflowFailedError';
    }
}
exports.WorkflowFailedError = WorkflowFailedError;
/**
 * Thrown the by client while waiting on Workflow execution result if Workflow
 * continues as new.
 *
 * Only thrown if asked not to follow the chain of execution (see {@link WorkflowOptions.followRuns}).
 */
class WorkflowContinuedAsNewError extends Error {
    constructor(message, newExecutionRunId) {
        super(message);
        this.newExecutionRunId = newExecutionRunId;
        this.name = 'WorkflowExecutionContinuedAsNewError';
    }
}
exports.WorkflowContinuedAsNewError = WorkflowContinuedAsNewError;
/**
 * Type assertion helper, assertion is mostly empty because any additional
 * properties are optional.
 */
function isServerErrorResponse(err) {
    return err instanceof Error;
}
exports.isServerErrorResponse = isServerErrorResponse;
//# sourceMappingURL=errors.js.map