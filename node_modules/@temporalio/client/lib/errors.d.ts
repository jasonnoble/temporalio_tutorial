import { ServerErrorResponse } from '@grpc/grpc-js';
import { RetryState, TemporalFailure } from '@temporalio/common';
/**
 * Generic Error class for errors coming from the service
 */
export declare class ServiceError extends Error {
    readonly name: string;
    readonly cause?: Error;
    constructor(message: string, opts?: {
        cause: Error;
    });
}
/**
 * Thrown by the client while waiting on Workflow execution result if execution
 * completes with failure.
 *
 * The failure type will be set in the `cause` attribute.
 *
 * For example if the workflow is cancelled, `cause` will be set to
 * {@link CancelledFailure}.
 */
export declare class WorkflowFailedError extends Error {
    readonly cause: TemporalFailure | undefined;
    readonly retryState: RetryState;
    readonly name: string;
    constructor(message: string, cause: TemporalFailure | undefined, retryState: RetryState);
}
/**
 * Thrown the by client while waiting on Workflow execution result if Workflow
 * continues as new.
 *
 * Only thrown if asked not to follow the chain of execution (see {@link WorkflowOptions.followRuns}).
 */
export declare class WorkflowContinuedAsNewError extends Error {
    readonly newExecutionRunId: string;
    readonly name: string;
    constructor(message: string, newExecutionRunId: string);
}
/**
 * Type assertion helper, assertion is mostly empty because any additional
 * properties are optional.
 */
export declare function isServerErrorResponse(err: unknown): err is ServerErrorResponse;
