/** Shorthand alias */
export declare type AnyFunc = (...args: any[]) => any;
/** A tuple without its last element */
export declare type OmitLast<T> = T extends [...infer REST, any] ? REST : never;
/** F with all arguments but the last */
export declare type OmitLastParam<F extends AnyFunc> = (...args: OmitLast<Parameters<F>>) => ReturnType<F>;
/** Verify that an type _Copy extends _Orig */
export declare function checkExtends<_Orig, _Copy extends _Orig>(): void;
export declare type Replace<Base, New> = Omit<Base, keyof New> & New;
export declare function isRecord(value: unknown): value is Record<string, unknown>;
export declare function hasOwnProperty<X extends Record<string, unknown>, Y extends PropertyKey>(record: X, prop: Y): record is X & Record<Y, unknown>;
export declare function hasOwnProperties<X extends Record<string, unknown>, Y extends PropertyKey>(record: X, props: Y[]): record is X & Record<Y, unknown>;
/**
 * Get `error.message` (or `undefined` if not present)
 */
export declare function errorMessage(error: unknown): string | undefined;
/**
 * Get `error.code` (or `undefined` if not present)
 */
export declare function errorCode(error: unknown): string | undefined;
