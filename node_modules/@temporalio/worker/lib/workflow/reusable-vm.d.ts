/// <reference types="node" />
import vm from 'node:vm';
import { Workflow, WorkflowCreateOptions, WorkflowCreator } from './interface';
import { WorkflowBundleWithSourceMapAndFilename } from './workflow-worker-thread/input';
import { BaseVMWorkflow } from './vm-shared';
/**
 * A WorkflowCreator that creates VMWorkflows in the current isolate
 */
export declare class ReusableVMWorkflowCreator implements WorkflowCreator {
    readonly workflowBundle: WorkflowBundleWithSourceMapAndFilename;
    readonly isolateExecutionTimeoutMs: number;
    /**
     * TODO(bergundy): Get rid of this static state somehow
     */
    private static unhandledRejectionHandlerHasBeenSet;
    static workflowByRunId: Map<string, ReusableVMWorkflow>;
    /**
     * Optional context - this attribute is deleted upon on {@link destroy}
     *
     * Use the {@link context} getter instead
     */
    _context?: vm.Context;
    /**
     * Store the global object keys we want to share between contexts
     */
    readonly contextKeysToPreserve: Set<string>;
    constructor(script: vm.Script, workflowBundle: WorkflowBundleWithSourceMapAndFilename, isolateExecutionTimeoutMs: number);
    protected get context(): vm.Context;
    /**
     * Inject console.log and friends into a vm context.
     *
     * Overridable for test purposes.
     */
    protected injectConsole(): void;
    /**
     * Create a workflow with given options
     */
    createWorkflow(options: WorkflowCreateOptions): Promise<Workflow>;
    /**
     * Create a new instance, pre-compile scripts from given code.
     *
     * This method is generic to support subclassing.
     */
    static create<T extends typeof ReusableVMWorkflowCreator>(this: T, workflowBundle: WorkflowBundleWithSourceMapAndFilename, isolateExecutionTimeoutMs: number): Promise<InstanceType<T>>;
    /**
     * Cleanup the pre-compiled script
     */
    destroy(): Promise<void>;
}
/**
 * A Workflow implementation using Node.js' built-in `vm` module
 */
export declare class ReusableVMWorkflow extends BaseVMWorkflow {
    dispose(): Promise<void>;
}
