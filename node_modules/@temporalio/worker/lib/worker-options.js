"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileWorkerOptions = exports.addDefaultWorkerOptions = exports.appendDefaultInterceptors = exports.defaultSinks = exports.isPathBundleOption = exports.isCodeBundleOption = void 0;
const os = __importStar(require("node:os"));
const v8 = __importStar(require("node:v8"));
const time_1 = require("@temporalio/common/lib/time");
const internal_non_workflow_1 = require("@temporalio/common/lib/internal-non-workflow");
const activity_log_interceptor_1 = require("./activity-log-interceptor");
const runtime_1 = require("./runtime");
const utils_1 = require("./utils");
const bundler_1 = require("./workflow/bundler");
function isCodeBundleOption(bundleOpt) {
    const opt = bundleOpt; // Cast to access properties without TS complaining
    return typeof opt.code === 'string';
}
exports.isCodeBundleOption = isCodeBundleOption;
function isPathBundleOption(bundleOpt) {
    const opt = bundleOpt; // Cast to access properties without TS complaining
    return typeof opt.codePath === 'string';
}
exports.isPathBundleOption = isPathBundleOption;
/**
 * Returns the `defaultWorkerLogger` sink which forwards logs from the Workflow sandbox to a given logger.
 *
 * @param logger a {@link Logger} - defaults to the {@link Runtime} singleton logger.
 */
function defaultSinks(logger = runtime_1.Runtime.instance().logger) {
    return {
        defaultWorkerLogger: {
            trace: {
                fn(_, message, attrs) {
                    logger.trace(message, attrs);
                },
            },
            debug: {
                fn(_, message, attrs) {
                    logger.debug(message, attrs);
                },
            },
            info: {
                fn(_, message, attrs) {
                    logger.info(message, attrs);
                },
            },
            warn: {
                fn(_, message, attrs) {
                    logger.warn(message, attrs);
                },
            },
            error: {
                fn(_, message, attrs) {
                    logger.error(message, attrs);
                },
            },
        },
    };
}
exports.defaultSinks = defaultSinks;
/**
 * Appends the default Worker logging interceptors to given interceptor arrays.
 *
 * @param logger a {@link Logger} - defaults to the {@link Runtime} singleton logger.
 */
function appendDefaultInterceptors(interceptors, logger = runtime_1.Runtime.instance().logger) {
    return {
        activityInbound: [...(interceptors.activityInbound ?? []), (ctx) => new activity_log_interceptor_1.ActivityInboundLogInterceptor(ctx, logger)],
        workflowModules: [...(interceptors.workflowModules ?? []), ...bundler_1.defaultWorflowInterceptorModules],
    };
}
exports.appendDefaultInterceptors = appendDefaultInterceptors;
function addDefaultWorkerOptions(options) {
    const { maxCachedWorkflows, showStackTraceSources, namespace, reuseV8Context, ...rest } = options;
    const debugMode = options.debugMode || isSet(process.env.TEMPORAL_DEBUG);
    return {
        namespace: namespace ?? 'default',
        identity: `${process.pid}@${os.hostname()}`,
        shutdownGraceTime: 0,
        maxConcurrentActivityTaskExecutions: 100,
        maxConcurrentLocalActivityExecutions: 100,
        enableNonLocalActivities: true,
        maxConcurrentWorkflowTaskExecutions: 100,
        stickyQueueScheduleToStartTimeout: '10s',
        maxHeartbeatThrottleInterval: '60s',
        defaultHeartbeatThrottleInterval: '30s',
        // 4294967295ms is the maximum allowed time
        isolateExecutionTimeout: debugMode ? '4294967295ms' : '5s',
        workflowThreadPoolSize: reuseV8Context ? 1 : 8,
        maxCachedWorkflows: maxCachedWorkflows ?? Math.floor(Math.max(v8.getHeapStatistics().heap_size_limit / utils_1.GiB - 1, 1) * 250),
        enableSDKTracing: false,
        showStackTraceSources: showStackTraceSources ?? false,
        reuseV8Context: reuseV8Context ?? false,
        debugMode: debugMode ?? false,
        interceptors: appendDefaultInterceptors({}),
        sinks: defaultSinks(),
        ...rest,
    };
}
exports.addDefaultWorkerOptions = addDefaultWorkerOptions;
function isSet(env) {
    if (env === undefined)
        return false;
    env = env.toLocaleLowerCase();
    return env === '1' || env === 't' || env === 'true';
}
function compileWorkerOptions(opts) {
    return {
        ...opts,
        shutdownGraceTimeMs: (0, time_1.msToNumber)(opts.shutdownGraceTime),
        shutdownForceTimeMs: (0, time_1.msOptionalToNumber)(opts.shutdownForceTime),
        stickyQueueScheduleToStartTimeoutMs: (0, time_1.msToNumber)(opts.stickyQueueScheduleToStartTimeout),
        isolateExecutionTimeoutMs: (0, time_1.msToNumber)(opts.isolateExecutionTimeout),
        maxHeartbeatThrottleIntervalMs: (0, time_1.msToNumber)(opts.maxHeartbeatThrottleInterval),
        defaultHeartbeatThrottleIntervalMs: (0, time_1.msToNumber)(opts.defaultHeartbeatThrottleInterval),
        loadedDataConverter: (0, internal_non_workflow_1.loadDataConverter)(opts.dataConverter),
    };
}
exports.compileWorkerOptions = compileWorkerOptions;
//# sourceMappingURL=worker-options.js.map