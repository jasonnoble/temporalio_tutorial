import { LogLevel } from '@temporalio/core-bridge';
export declare type LogMetadata = Record<string | symbol, any>;
export interface LogEntry {
    level: LogLevel;
    message: string;
    timestampNanos: bigint;
    /** Custom attributes */
    meta?: LogMetadata;
}
/**
 * Implement this interface in order to customize worker logging
 */
export interface Logger {
    log(level: LogLevel, message: string, meta?: LogMetadata): any;
    trace(message: string, meta?: LogMetadata): any;
    debug(message: string, meta?: LogMetadata): any;
    info(message: string, meta?: LogMetadata): any;
    warn(message: string, meta?: LogMetadata): any;
    error(message: string, meta?: LogMetadata): any;
}
export { LogLevel };
export declare const LogTimestamp: unique symbol;
/**
 * Log messages to `stderr` using basic formatting
 */
declare function defaultLogFunction(entry: LogEntry): void;
/**
 * Takes a `[seconds, nanos]` tuple as returned from getTimeOfDay and turns it into bigint.
 */
export declare function timeOfDayToBigint(timeOfDay: [number, number]): bigint;
/**
 * Default worker logger - uses a default log function to log messages to `console.error`.
 * See constructor arguments for customization.
 */
export declare class DefaultLogger implements Logger {
    readonly level: LogLevel;
    protected readonly logFunction: typeof defaultLogFunction;
    protected readonly severity: number;
    constructor(level?: LogLevel, logFunction?: typeof defaultLogFunction);
    log(level: LogLevel, message: string, meta?: LogMetadata): void;
    trace(message: string, meta?: LogMetadata): void;
    debug(message: string, meta?: LogMetadata): void;
    info(message: string, meta?: LogMetadata): void;
    warn(message: string, meta?: LogMetadata): void;
    error(message: string, meta?: LogMetadata): void;
}
